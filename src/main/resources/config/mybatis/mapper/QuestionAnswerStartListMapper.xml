<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yikangyiliao.pension.dao.QuestionAnswerStartListMapper">
	<resultMap id="BaseResultMap"
		type="com.yikangyiliao.pension.entity.QuestionAnswerStartList">
		<id column="question_answer_start_list_id" property="questionAnswerStartListId"
			jdbcType="BIGINT" />
		<result column="create_user_id" property="createUserId"
			jdbcType="BIGINT" />
		<result column="question_answer_id" property="questionAnswerId"
			jdbcType="BIGINT" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Base_Column_List">
		question_answer_start_list_id, create_user_id,
		question_answer_id, create_time, update_time
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from question_answer_start_lists
		where question_answer_start_list_id =
		#{questionAnswerStartListId,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from
		question_answer_start_lists
		where question_answer_start_list_id =
		#{questionAnswerStartListId,jdbcType=BIGINT}
	</delete>
	<insert id="insert"
		parameterType="com.yikangyiliao.pension.entity.QuestionAnswerStartList">
		insert into question_answer_start_lists
		(question_answer_start_list_id, create_user_id,
		question_answer_id,
		create_time, update_time
		)
		values
		(#{questionAnswerStartListId,jdbcType=BIGINT},
		#{createUserId,jdbcType=BIGINT},
		#{questionAnswerId,jdbcType=BIGINT},
		#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
		)
	</insert>
	<insert id="insertSelective"
		parameterType="com.yikangyiliao.pension.entity.QuestionAnswerStartList">
		insert into question_answer_start_lists
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="questionAnswerStartListId != null">
				question_answer_start_list_id,
			</if>
			<if test="createUserId != null">
				create_user_id,
			</if>
			<if test="questionAnswerId != null">
				question_answer_id,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="questionAnswerStartListId != null">
				#{questionAnswerStartListId,jdbcType=BIGINT},
			</if>
			<if test="createUserId != null">
				#{createUserId,jdbcType=BIGINT},
			</if>
			<if test="questionAnswerId != null">
				#{questionAnswerId,jdbcType=BIGINT},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.yikangyiliao.pension.entity.QuestionAnswerStartList">
		update question_answer_start_lists
		<set>
			<if test="createUserId != null">
				create_user_id = #{createUserId,jdbcType=BIGINT},
			</if>
			<if test="questionAnswerId != null">
				question_answer_id = #{questionAnswerId,jdbcType=BIGINT},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where question_answer_start_list_id =
		#{questionAnswerStartListId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.yikangyiliao.pension.entity.QuestionAnswerStartList">
		update question_answer_start_lists
		set create_user_id =
		#{createUserId,jdbcType=BIGINT},
		question_answer_id =
		#{questionAnswerId,jdbcType=BIGINT},
		create_time =
		#{createTime,jdbcType=TIMESTAMP},
		update_time =
		#{updateTime,jdbcType=TIMESTAMP}
		where question_answer_start_list_id =
		#{questionAnswerStartListId,jdbcType=BIGINT}
	</update>


	<!-- 查询一条记录根据问题回复和创建用户 -->
	<select id="getRowByQuestionAnswerIdAndCreateUserId"
		parameterType="map" resultMap="BaseResultMap">
		select
		qasl.*
		from
		question_answer_start_lists qasl
		where
		qasl.question_answer_id=#{questionAnswerId}
		and
		qasl.create_user_id=#{createUserId}
	</select>

	<delete
		id="deleteQuestionAnswerStartListByQuestionAnswerIdAndCreateUserId" parameterType="long">
		delete from question_answer_start_lists
		where question_answer_id=#{questionAnswerId}
		and
		create_user_id=#{createUserId}
	</delete>
	
	
	
</mapper>